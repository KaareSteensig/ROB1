#!/usr/bin/env python
# license removed for brevity
import rospy
from std_msgs.msg import Float64, Empty, Float64MultiArray

class is_at_position:
    def __init__(self):
        # make subscribers
        sub = rospy.Subscriber('postion', Float64MultiArray, is_at_position.request)
        subJoint1 = rospy.Subscriber('/joint1/state', Float64, is_at_position.joint1)
        subJoint2 = rospy.Subscriber('/joint2/state', Float64, is_at_position.joint2)
        subJoint3 = rospy.Subscriber('/joint3/state', Float64, is_at_position.joint3)
        # set acceptabel diff before continueing
        self.acceptabel = 10
        # prepare empty variables
        self.joint1 = None
        self.joint2 = None
        self.joint3 = None
        self.joint1Goal = None
        self.joint2Goal = None
        self.joint3Goal = None
        # prepare publisher
        self.pub = rospy.Publisher('/is_at_position/response', Empty, queue_size = 1)
        print('Ready')

    def joint1(self, msg):
        self.joint1 = msg

    def joint2(self, msg):
        self.joint2 = msg

    def joint3(self, msg):
        self.joint3 = msg

    def request(self, msg):
        temp = (((self.joint1 < (msg[0] + self.acceptable)) and (self.joint1 > (msg[0] - self.acceptable))) and ((self.joint2 < (msg[1] + self.acceptable)) and (self.joint2 > (msg[1] - self.acceptable))) and ((self.joint3 < (msg[2] + self.acceptable)) and (self.joint3 > (msg[2] - self.acceptable))))
        print(temp)
        self.pub.publish(Empty())

def start():
    # init node
    rospy.init_node('is_at_position', anonymous=True)
    # spin node
    rospy.spin()

if __name__ == '__main__':
    is_ready = is_at_position()
    start()
